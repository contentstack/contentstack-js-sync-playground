$(window).load(function() {


    Stack = Contentstack.Stack({
        'api_key': 'blt74a50c2ca360f373',
        'access_token': 'cs277916ede0367f794aaa48c6',
        'environment': 'web'
    })



    sync_call().then((data) => {
            if (data == "true") {
               console.log("Execution is completed successfully")
            } else {
                console.log("Execution is not completed successfully")
            }
        });


    $(document).on('click', '.synccall', function() {
        let sync_token = localStorage.getItem("sync_token")
        if (sync_token) {
            new Promise((resolve, reject) => {
                if (sync_token !== null) {
                    Stack
                        .sync({
                            "sync_token": sync_token
                        })
                        .then(function(data) {
                            let result = publish(data);
                            return resolve(result);
                        }, function(err) {
                            console.info('Error : ' + err);
                            reject(err);
                        });
                }
            });
        } else {
            alert("Subsequent sync can not execute")
        }
    });

    $(document).on('click', '.paginationcall', function() {
        let pagination_token = localStorage.getItem("pagination_token")
        console.log("datatatatat", pagination_token)
        if (pagination_token) {
            console.log("datatatatat", pagination_token)
            new Promise((resolve, reject) => {
                if (pagination_token !== null) {
                    Stack
                        .sync({
                            "pagination_token": pagination_token
                        })
                        .then(function(data) {

                            let result = publish(data);
                            return resolve(result);
                        }, function(err) {
                            console.info('Error : ' + err);
                            reject(err);
                        });
                }
            });
        } else {
            alert("Pagination call can not execute")
        }
    });
});

/* sync_call function is use to call sync Api and storage the sync data in local storage using publish function */

function sync_call() {

    let pagination = localStorage.getItem("pagination_token")
    let sync_token = localStorage.getItem("sync_token")

    return new Promise((resolve, reject) => {

        if (pagination == null && sync_token == null) {
            Stack
                .sync({
                    "init": "true"
                })
                .then(function(data) {
                    let result = publish(data);
                    return resolve(result);
                }, function(err) {
                    console.info('Error : ' + err);
                    reject(err);
                });

        } else if (pagination == null && sync_token !== null) {
            Stack
                .sync({
                    "sync_token": sync_token
                })
                .then(function(data) {
                    let result = publish(data);
                    return resolve(result);
                }, function(err) {
                    console.info('Error : ' + err);
                    reject(err);
                });
        } else if (pagination !== null && sync_token == null) {
            Stack
                .sync({
                    "pagination_token": pagination
                })
                .then(function(data) {
                    let result = publish(data);
                    return resolve(result);
                }, function(err) {
                    console.info('Error : ' + err);
                    reject(err);
                });
        }
    });

}


/**
    This function store publish data under localstorage of Browser. 
*/
function publish(data) {

    let toBeStoredAssets = {},
        toBeStoredEntries = {},
        toBeDeleteddata = {},
        api_key,
        _env;

    api_key = Stack.headers.api_key;
    _env = Stack.environment
    let result = data.items;


    if (result && result.length) {
        for (i = 0; i < result.length; i++) {
            if (result[i].type === "asset_published") {
                toBeStoredAssets[api_key + "." + _env + "." + "assets"] = toBeStoredAssets[api_key + "." + _env + "." + "assets"] || []
                toBeStoredAssets[api_key + "." + _env + "." + "assets"].push(result[i].data);
            } else if (result[i].type === "entry_published") {
                toBeStoredEntries[api_key + "." + _env + "." + result[i].content_type_uid] = toBeStoredEntries[api_key + "." + _env + "." + result[i].content_type_uid] || []
                toBeStoredEntries[api_key + "." + _env + "." + result[i].content_type_uid].push(result[i].data);
            } else {
                toBeDeleteddata[api_key + "." + _env + "." + result[i].content_type_uid] = toBeDeleteddata[api_key + "." + _env + "." + result[i].content_type_uid] || []
                toBeDeleteddata[api_key + "." + _env + "." + result[i].content_type_uid].push(result[i].data);
            }
        }
    }


    if (Object.keys(toBeStoredEntries).length) {
        for (let contentType in toBeStoredEntries) {
            if (localStorage.getItem(contentType)) {
                let existing_data = JSON.parse(localStorage.getItem(contentType))
                for (i = 0; i < toBeStoredEntries[contentType].length; i++) {
                    for (j = 0; j < existing_data.length; j++) {
                        if (toBeStoredEntries[contentType][i].uid === existing_data[j].uid && existing_data[j]._version < toBeStoredEntries[contentType][i]._version) {
                            const index = j;
                            existing_data.splice(index, 1);
                        }
                    }
                }
                let final_data = existing_data.concat(toBeStoredEntries[contentType])
                localStorage.setItem(contentType, JSON.stringify(final_data));
            } else {

                localStorage.setItem(contentType, JSON.stringify(toBeStoredEntries[contentType]))
            }
        }
    }


    if (Object.keys(toBeStoredAssets).length) {
        for (let assets in toBeStoredAssets) {
            if (localStorage.getItem(assets)) {
                let existing_data = JSON.parse(localStorage.getItem(assets))
                for (i = 0; i < toBeStoredAssets[assets].length; i++) {
                    for (j = 0; j < existing_data.length; j++) {
                        if (toBeStoredAssets[assets][i].uid === existing_data[j].uid && existing_data[j]._version < toBeStoredAssets[assets][i]._version) {
                            const index = j;
                            existing_data.splice(index, 1);
                        }
                    }
                }
                let final_data = existing_data.concat(toBeStoredAssets[assets])
                localStorage.setItem(assets, JSON.stringify(final_data));
            } else {
                localStorage.setItem(assets, JSON.stringify(toBeStoredAssets[assets]))
            }
        }
    }

    if (Object.keys(toBeDeleteddata).length) {
        unpublish(toBeDeleteddata)
    }


    if (data.pagination_token != undefined) {
        localStorage.setItem("pagination_token", data.pagination_token);
    }

    if (data.sync_token != undefined) {
        localStorage.removeItem("pagination_token");
        localStorage.setItem("sync_token", data.sync_token);
    }


    if (!location.hash) {
        render_session_lists();
        return "true";
    } else {
        return "true";
    }
}


/**
    This function delete unpublish data from localstorage of Browser. 
*/

function unpublish(data) {

    let api_key = Stack.headers.api_key,
        _env = Stack.environment
    let toBeDeleteddata = data;

    for (let deleted_item in toBeDeleteddata) {
        let existing_data;
        let _deleted_item;
        if (deleted_item === api_key + "." + _env + "." + "sys_assets") {

            _deleted_item = api_key + "." + _env + "." + "assets";
            existing_data = JSON.parse(localStorage.getItem(_deleted_item))
        } else {
            _deleted_item = deleted_item
            existing_data = JSON.parse(localStorage.getItem(_deleted_item))
        }

        if (localStorage.getItem(_deleted_item)) {
            for (i = 0; i < toBeDeleteddata[deleted_item].length; i++) {
                for (j = 0; j < existing_data.length; j++) {
                    if (toBeDeleteddata[deleted_item][i].uid === existing_data[j].uid) {
                        const index = j;
                        existing_data.splice(index, 1);
                    }
                }
            }
            let final_data = existing_data
            localStorage.setItem(_deleted_item, JSON.stringify(final_data));
        }
    }
}


/**
    This function render the list of publish data which are store under localstorage of Browser. 
*/
function render_session_lists() {

    new Promise((resolve, reject) => {
        Stack
            .sync({
                "init": true
            })
            .then(function(data) {
                var dataCount = data.total_count
                session_result(dataCount)
                // $(".total-count").append("<p>Total count</p><span>"+data.total_count+"</span>")                               
                resolve();
            }, function(err) {
                console.info('Error : ' + err);
                reject(err);
            });
    });
}

function session_result(dataCount) {

    showloader()
    getItemParameter = Stack.headers.api_key + "." + Stack.environment
    $(".container-fluid").empty();
    $(".container-fluid").show();

    var session = localStorage.getItem(getItemParameter + ".session");
    var session_data = JSON.parse(session);
    var str = ''
    for (var i = 0; i < session_data.length; i++) {
        str = ''
        var start_date_time = session_data[i].start_time
        var end_date_time = session_data[i].end_time
        var start_time = start_date_time.substr(11, 5)
        var start_date = start_date_time.substr(0, 10)
        var end_time = end_date_time.substr(11, 5)

        if (i % 2 == 0) {
            str += "<div class='container cont-colo scroll-tag' id=calling-id'>"
            str += "<div class=row>"
        } else {
            str += "<div class='container scroll-tag' id=calling-id'>"
            str += "<div class=row>"
        }
        str += "<div class='col-sm-9 author'>"
        str += "<div class=row>"
        str += "<div class=growth id=author-description>"
        str += "<h1 class=activity-name>" + session_data[i].title + "</h1>"
        str += "</div>"
        str += "</div>"
        str += "</div>"
        str += "</div>"
        $(".container-fluid ").append(str)
    }
    hideloader()
    $(".total-count").html("<p>Total count :</p><span>" + dataCount + "</span><br>")

    if (localStorage.getItem("pagination_token")) {
        $(".synccall").hide();
        $(".paginationcall").show();
        $(".total-count").append("<p>Pagination token :</p><span>" + localStorage.getItem("pagination_token") + "</span>")
    }
    if (localStorage.getItem("sync_token")) {
        $(".synccall").show();
        $(".paginationcall").hide();
        $(".total-count").append("<p>Sync token :</p><span>" + localStorage.getItem("sync_token") + "</span>")
    }
}